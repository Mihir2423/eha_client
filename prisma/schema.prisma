generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("userId")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String?  @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 Int           @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt
  username           String
  email              String        @unique
  role               String?       @default("user")
  provider           String?
  password           String
  resetPasswordToken String?
  confirmationToken  String?
  confirmed          Boolean?
  blocked            Boolean?      @default(false)
  firstName          String?
  lastName           String?
  gender             Gender?
  dateOfBirth        DateTime?
  age                String?
  phoneNumber        String?
  landlineNo         String?
  profileImage       String?
  address            Address[]     @relation("AddressToUser")
  userAddress        UserAddress[] @relation("UserAddressToUser")
  accounts           Account[]
  orders             Order[]       @relation("OrderToUser")

  products Product[] @relation("ProductToUser")
  Session  Session[]
}

model Address {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  address1  String
  address2  String
  landmark  String
  city      String
  state     String
  zip       String
  country   String
  telephone String
  email     String
  userId    Int
  user      User?     @relation("AddressToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model UserAddress {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  address1  String
  address2  String
  landmark  String
  city      String
  state     String
  zip       String
  country   String
  telephone String
  email     String
  userId    Int
  user      User?     @relation("UserAddressToUser", fields: [userId], references: [id], onDelete: Cascade)
}

// model Category {
//   id              Int               @id @default(autoincrement())
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime?         @updatedAt
//   name            String
//   CategoryType    String?
//   slug            String            @unique
//   productCategory String
//   categoryId      Int
//   products        ProductCategory[] @relation("CategoryToProduct")
//   orders          Order[]
// }

model Product {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
  name          String
  price         Int
  image         String
  description   String
  slug          String            @unique
  thumbnail     String
  originalPrice Int
  Brand         String
  rating        Int
  category    String?
  // categories    ProductCategory[] @relation("ProductToCategory")
  productId     Int?
  orders        Order[]
  user          User?             @relation(name: "ProductToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int?              @map("userId")
}

// model ProductCategory {
//   id         Int       @id @default(autoincrement())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime? @updatedAt
//   productId  Int
//   categoryId Int
//   category   Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
//   product    Product   @relation("ProductToCategory", fields: [productId], references: [id])

//   @@unique([productId, categoryId], name: "unique_product_category")
// }

model Order {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  city       String
  state      String
  amount     Int
  items      Json
  pin        Int
  // categoryId Int
  // category   Category  @relation(fields: [categoryId], references: [id])
  productId  Int
  product    Product   @relation(fields: [productId], references: [id])
  userId     Int
  user       User      @relation(name: "OrderToUser", fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
}
